<?xml version="1.0" encoding="ISO-8859-1"?>
<library>
<project>superdarn</project>
<name>radar</name>
<location>src.lib/tk/radar</location>

<function>
<name>RadarEpochGetSite</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>struct RadarSite *RadarEpochGetSite(<sn href="structRadar.html">struct Radar</sn> *ptr,double tval);</syntax>
<description><p>The <fn href="RadarEpochGetSite.html">RadarEpochGetSite</fn> function locates the hardware information for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to the structure containing the radar information block. The radar hardware parameters can vary over time, so the time for which the hardware information is requested is given by the argument <ar>tval</ar>, expressed inseconds from 0:00UT January 1, 1970.</p>
</description>
<returns>Returns a pointer to the radar hardware information for the desired time. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">RadarEpochGetSite.c</example>
</function>

<function>
<name>RadarFree</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>void RadarFree(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr);</syntax>
<description><p>The <fn href="RadarFree.html">RadarFree</fn> function frees the memory allocated to store information about the radar network.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for all the radars.</p>
</description>
</function>

<function>
<name>RadarGetCode</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>char *RadarGetCode(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr,int stid,int cnum);</syntax>
<description><p>The <fn href="RadarGetCode.html">RadarGetCode</fn> function locates the station identifier code for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network. The radar identifier number for the radar is given by the argument <ar>stid</ar>.</p>
<p>Originally, radars were identified using a single letter code. However as the network has expanded, multiple letter codes are now used. To maintain compatibility, radars can have multiple identifier codes defined. The argument <ar>cnum</ar> is used to select which identifier code is returned.</p>
</description>
<returns>Returns a pointer to a zero terminated text string that contains the radar code. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">RadarGetCode.c</example>
</function>

<function>
<name>RadarGetCodeNum</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>int RadarGetCodeNum(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr,int stid);</syntax>
<description><p>The <fn href="RadarGetCodeNum.html">RadarGetCodeNum</fn> function locates how many identifier codes are defined for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network. The radar identifier number for the radar is given by the argument <ar>stid</ar>.</p>
</description>
<returns>Returns the number of identifier codes defined for a radar. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">RadarGetCodeNum.c</example>
</function>

<function>
<name>RadarGetID</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>int RadarGetID(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr,char *code);</syntax>
<description><p>The <fn href="RadarGetID.html">RadarGetID</fn> function locates the station identifier number for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network. The radar identifier code for the radar is given by the zero terminated string pointed to by argument <ar>code</ar>.</p>
</description>
<returns>Returns the radar identifier number. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">RadarGetID.c</example>
</function>

<function>
<name>RadarGetName</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>char *RadarGetName(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr,int stid);</syntax>
<description><p>The <fn href="RadarGetName.html">RadarGetName</fn> function locates the station name for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network. The radar identifier number for the radar is given by the argument <ar>stid</ar>.</p>
</description>
<returns>Returns a pointer to a zero terminated text string that contains the radar name. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">RadarGetName.c</example>
</function>

<function>
<name>RadarGetOperator</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>char *RadarGetOperator(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr,int stid);</syntax>
<description><p>The <fn href="RadarGetOperator.html">RadarGetOperator</fn> function locates the station operator for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network. The radar identifier number for the radar is given by the argument <ar>stid</ar>.</p>
</description>
<returns>Returns a pointer to a zero terminated text string that contains the radar operator. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">RadarGetOperator.c</example>
</function>

<function>
<name>RadarGetRadar</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax><sn href="structRadar.html">struct Radar</sn> *RadarGetRadar(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr,int stid);</syntax>
<description><p>The <fn href="RadarGetRadar.html">RadarGetRadar</fn> function locates the radar information block for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network. The radar identifier number for the radar is given by the argument <ar>stid</ar>.</p>
</description>
<returns>Returns a pointer to the radar information structure for a radar. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">RadarGetRadar.c</example>
</function>

<function>
<name>RadarGetStatus</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>int RadarGetStatus(<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr,int stid);</syntax>
<description><p>The <fn href="RadarGetStatus.html">RadarGetStatus</fn> function locates the status condition for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network. The radar identifier number for the radar is given by the argument <ar>stid</ar>.</p>
</description>
<returns><p>Returns a number representing the status of a radar. On error, (-1) is returned.</p>
<p>Possible status codes are:</p>
<center><table><tr><td><b>Value</b></td><td><b>Definition</b></td></tr>
<tr><td>-1</td><td>Unknown or decommissioned.</td></tr>
<tr><td>0</td><td>Operational.</td></tr>
<tr><td>1</td><td>Proposed or under construction.</td></tr>
</table></center></returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">RadarGetStatus.c</example>
</function>

<function>
<name>RadarLoad</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax><sn href="structRadarNetwork.html">struct RadarNetwork</sn> *RadarLoad(FILE *fp);</syntax>
<description><p>The <fn href="RadarLoad.html">RadarLoad</fn> function reads information about the radar network from an open stream.</p>
<p>The radar information file is read from the stream pointed to by the argument <ar>fp</ar>.</p>
</description>
<returns>Returns a pointer to a structure containing information about the radar network. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">RadarLoad.c</example>
</function>

<function>
<name>RadarLoadHardware</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax>int RadarLoadHardware(char *hdwpath,<sn href="structRadarNetwork.html">struct RadarNetwork</sn> *ptr);</syntax>
<description><p>The <fn href="RadarLoadHardware.html">RadarLoadHardware</fn> function loads the hardware information for the radar network.</p>
<p>The hardware files are assumed to be located in the directory given by the argument <ar>hdwpath</ar>. The argument <ar>ptr</ar> is a pointer to a structure containing the information for the entire network and must be populated prior to calling this function.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">RadarLoadHardware.c</example>
</function>

<function>
<name>RadarYMDHMSGetSite</name>
<location>src.lib/tk/radar</location>
<header>superdarn/radar.h</header>
<syntax><sn href="structRadarSite.html">struct RadarSite</sn> *RadarYMDHMSGetSite(<sn href="structRadar.html">struct Radar</sn> *ptr,int yr, int mo,int dy,int hr,int mt,int sc);</syntax>
<description><p>The <fn href="RadarEpochGetSite.html">RadarEpochGetSite</fn> function locates the hardware information for one of the radars.</p>
<p>The argument <ar>ptr</ar> is a pointer to the structure containing the radar information block. The radar hardware parameters can vary over time, so the time for which the hardware information is requested is specified by the arguments <ar>yr</ar>, <ar>mo</ar>,<ar>dy</ar>,<ar>hr</ar>,<ar>mt</ar>,<ar>sc</ar> giving the year, month, day, hour, minute and second.</p>
</description>
<returns>Returns a pointer to the radar hardware information for the desired time. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">RadarYMDHMSGetSite.c</example>
</function>


<structure>
  <name>Radar</name>
  <location>src.lib/tk/radar</location>
  <header>superdarn/radar.h</header>
  <struct>
    
    <member>
      <proto>int id;</proto>
      <description>Identifier number.</description>
    </member>

    <member>
      <proto>int status;</proto>
      <description>Status proto.</description>
    </member>
    
    <member>
      <proto>int cnum;</proto>
      <description>Number of identifier protos.</description>
    </member>
    
    <member>
      <proto>char **proto;</proto>
      <description>Pointer to an array of zero terminated strings giving the identifier protos.</description>
    </member>

    <member>
      <proto>char *name;</proto>
      <description>Zero terminated string giving the station name.</description>
    </member>

    <member>
      <proto>char *operator;</proto>
      <description>Zero terminated string giving the station operator.</description>
    </member>

    <member>
      <proto>char *hdwfname;</proto>
      <description>Zero terminated string giving the filename of the hardware information file.</description>
    </member>

    <member>
      <proto>int snum;</proto>
      <description>Number of entries in the hardware table.</description>
    </member>

    <member>
      <proto><sn href="structRadarSite.html">struct RadarSite</sn> *site;</proto>
      <description>Pointer to an Array containing the entries in the hardware table.</description>
    </member>

  </struct>

  <description>
  <p>The <sn href="structRadar.html">struct Radar</sn> structure stores information about a radar.</p>
  </description>
</structure>


<structure>
  <name>RadarNetwork</name>
  <location>src.lib/tk/radar</location>
  <header>superdarn/radar.h</header>
  <struct>
  
    <member>
      <proto>int rnum;</proto>
      <description>Number of entries in the table.</description>
    </member>
    
    <member>
      <proto><sn href="structRadar.html">struct Radar</sn> *radar;</proto>
      <description>Pointer to an array of structures containing information about each radar.</description>
    </member>

  </struct>
  
  <description>
  <p>The <sn href="structRadarNetwork.html">struct RadarNetwork</sn> structure stores information about the radar network.</p>
  </description>
</structure>


<structure>
  <name>RadarParm</name>
  <location>src.lib/tk/radar</location>
  <header>superdarn/rprm.h</header>
  <struct>

    <member>
      <struct>
        <member>
          <proto>char major;</proto>
          <description>Major revision number.</description>
        </member>
        <member>
          <proto>char minor;</proto>
          <description>Minor revision number.</description>
        </member>
      </struct>
      <proto>revision;</proto>
      <description>Revision number.</description>
    </member>

    <member>
      <struct>
        <member>
          <proto>char proto;</proto>
          <description>Origin proto, zero (0) if generated at the radar site, non-zero if generated by post processsing.</description>
        </member>
        <member>
          <proto>char time[ORIGIN_TIME_SIZE];</proto>
          <description>ASCII representation of the time at which the file was generated.</description>
        </member>
        <member>
          <proto>char command[ORIGIN_COMMAND_SIZE];</proto>
          <description>The command line or the name of the control program that generated the file.</description>
        </member>
      </struct>
      <proto>origin;</proto>
      <description>Origin of the file.</description>
    </member>

    <member>
      <proto>int16 cp;</proto>
      <description>Control program Identifier number.</description>
    </member>
    
    <member>
      <proto>int16 stid;</proto>
      <description>Station Identifier number.</description>
    </member>

    <member>
      <struct>
        <member>
          <proto>int16 yr;</proto>
          <description>Year.</description>
        </member>
        <member>
          <proto>int16 mo;</proto>
          <description>Month.</description>
        </member>
        <member>
          <proto>int16 dy;</proto>
          <description>Day.</description>
        </member>
        <member>
          <proto>int16 hr;</proto>
          <description>Hour.</description>
        </member>
        <member>
          <proto>int16 mt;</proto>
          <description>Minute.</description>
        </member>
        <member>
          <proto>int16 sc;</proto>
          <description>Second.</description>
        </member>
        <member>
          <proto>int32 us;</proto>
          <description>Microsecond.</description>
        </member>
      </struct>
      <proto>time;</proto>
      <description>Timestamp.</description>
    </member>

    <member>
      <proto>int16 txpow;</proto>
      <description>Transmitted power (kW).</description>
    </member>
 
    <member>
      <proto>int16 nave;</proto>
      <description>Number of pulse sequences transmitted.</description>
    </member>

    <member>
      <proto>int16 atten;</proto>
      <description>Attenuation level.</description>
    </member>

    <member>
      <proto>int16 lagfr;</proto>
      <description>Lag to  first range (microseconds).</description>
    </member>

    <member>
      <proto>int16 smsep;</proto>
      <description>Sample separation (microseconds).</description>
    </member>

    <member>
      <proto>int16 ercod;</proto>
      <description>Error proto.</description>
    </member>

    <member>
      <struct>
        <member>
          <proto>int16 agc;</proto>
          <description>AGC status word.</description>
        </member>
        <member>
          <proto>int16 lopwr;</proto>
          <description>LOPWR status word.</description>
        </member>
      </struct>
      <proto>stat;</proto>
      <description>Hardware status.</description>
    </member>

    <member>
      <struct>
        <member>
          <proto>float search;</proto>
          <description>Calculated noise from clear frequency search.</description>
        </member>
        <member>
          <proto>float mean;</proto>
          <description>Average noise across frequency band.</description>
        </member>
      </struct>
      <proto>noise;</proto>
      <description>Noise statistics.</description>
    </member>

    <member>
      <proto>int16 channel;</proto>
      <description>Channel number for a stereo radar.</description>
    </member>

    <member>
      <proto>int16 bmnum;</proto>
      <description>Beam number.</description>
    </member>

    <member>
      <proto>float bmazm;</proto>
      <description>Beam azimuth.</description>
    </member>

    <member>
      <proto>int16 scan;</proto>
      <description>Scan flag.</description>
    </member>

    <member>
      <proto>int16 rxrise;</proto>
      <description>Receiver rise time (microseconds).</description>
    </member>

    <member>
      <struct>
        <member>
          <proto>int16 sc;</proto>
          <description>Seconds.</description>
        </member>
        <member>
          <proto>int32 us;</proto>
          <description>Microseconds.</description>
        </member>
      </struct>
      <proto>intt;</proto>
      <description>Integration time.</description>
    </member>

    <member>
      <proto>int16 txpl;</proto>
      <description>Transmit pulse length (microseconds).</description>
    </member>

    <member>
      <proto>int16 mpinc;</proto>
      <description>Multi-pulse increment (microseconds).</description>
    </member>

    <member>
      <proto>int16 mppul;</proto>
      <description>Number of pulses in sequence.</description>
    </member>

    <member>
      <proto>int16 mplgs;</proto>
      <description>Number of lags in ACF.</description>
    </member>

    <member>
      <proto>int16 nrang;</proto>
      <description>Number of ranges.</description>
    </member>

    <member>
      <proto>int16 frang;</proto>
      <description>Distance to first range (kilometers).</description>
    </member>

    <member>
      <proto>int16 rsep;</proto>
      <description>Range separation (kilometers).</description>
    </member>

    <member>
      <proto>int16 xcf;</proto>
      <description>XCF flag.</description>
    </member>

    <member>
      <proto>int16 tfreq;</proto>
      <description>Transmitted frequency.</description>
    </member>

    <member>
      <proto>int16 offset;</proto>
      <description>Offset between channels for a stereo radar.</description>
    </member>

    <member>
      <proto>int32 mxpwr;</proto>
      <description>Maximum power.</description>
    </member>

    <member>
      <proto>int32 lvmax;</proto>
      <description>Maximum noise level.</description>
    </member>

    <member>
      <proto>int16 pulse[PULSE_SIZE];</proto>
      <description>Pulse table.</description>
    </member>

    <member>
      <proto>int16 lag[LAG_SIZE][2];</proto>
      <description>Lag table.</description>
    </member>

    <member>
      <proto>char combf[COMBF_SIZE];</proto>
      <description>Comment buffer.</description>
    </member>

  </struct>
  
  <description>
  <p>The <sn href="structRadarParm.html">struct RadarParm</sn> structure stores the radar parameter block. It contains the various operating parameters that the radar is using when gathering data.</p>
  </description>
</structure>


<structure>
  <name>RadarSite</name>
  <location>src.lib/tk/radar</location>
  <header>superdarn/radar.h</header>
  <struct>

    <member>
      <proto>int status;</proto>
      <description>Status code of radar site (1 operational, -1 decomissioned).</description>
    </member>

    <member>
      <proto>double tval;</proto>
      <description>Time at which this hardware entry became valid.</description>
    </member>

    <member>
      <proto>double geolat;</proto>
      <description>Geographic latitude of site.</description>
    </member>

    <member>
      <proto>double geolon;</proto>
      <description>Geographic longitude of site.</description>
    </member>

    <member>
      <proto>double alt;</proto>
      <description>Altitude of site.</description>
    </member>

    <member>
      <proto>double boresite;</proto>
      <description>Boresight angle.</description>
    </member>

    <member>
      <proto>double bmoff;</proto>
      <description>Electronic beam offset angle.</description>
    </member>

    <member>
      <proto>double bmsep;</proto>
      <description>Beam separation angle.</description>
    </member>

    <member>
      <proto>double vdir;</proto>
      <description>Definition of velocity direction. (+1.0 is normal, -1.0 indicates that the I & Q inputs to the receiver are reversed).</description>
    </member>

    <member>
      <proto>double tdiff[2];</proto>
      <description>Time delay in microseconds of the signal from the interferometer array and the main array for each radar channel (up to two channels are allowed).</description>
    </member>

    <member>
      <proto>double phidiff;</proto>
      <description>Sign of the phase shift of the interferometer array (+1 indicates the inteferometer is in front of the main array).</description>
    </member>

    <member>
      <proto>double interfer[3];</proto>
      <description>The x, y, z position of the interferometer array with respect to the main array. The values are given in meters. X is in the direction parallel to the main array, with +X being to the right looking along the boresight. Y is in the boresight direction, with +Y in front of the array. Z is the vertical displacement, with +Z being up.</description>
    </member>

    <member>
      <proto>double recrise;</proto>
      <description>Receiver rise time in microseconds.</description>
    </member>

    <member>
      <proto>double atten;</proto>
      <description>Attenuation step in decibels.</description>
    </member>

    <member>
      <proto>int maxatten;</proto>
      <description>Maximum number of attenuators.</description>
    </member>

    <member>
      <proto>int maxrange;</proto>
      <description>Maximum theoretical range.</description>
    </member>

    <member>
      <proto>int maxbeam;</proto>
      <description>Maximum theoretical number of beams.</description>
    </member>

  </struct>

  <description>
  <p>The <sn href="structRadarSite.html">struct RadarSite</sn> structure stores information about the radar hardware.</p>
  </description>

</structure>

</library>
