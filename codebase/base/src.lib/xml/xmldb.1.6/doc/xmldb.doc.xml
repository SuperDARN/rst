<?xml version="1.0" encoding="ISO-8859-1"?>
<library>
<project>base</project>
<name>rxmldb</name>
<location>src.lib/xml/xmldb</location>
<function>
<name>EntityAddEntity</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityAddEntity(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr, <sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *entity);</syntax>

<description><p>The <fn href="EntityAddEntity.html">EntityAddEntity</fn> function adds an entity definition to an entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The text that defines the entity is stored in the structure pointed to by the argument <ar>entity</ar>.</p>
<p>An entity is often used as short hand for repeated text, to refer to symbols that would otherwise confuse the XML passer, such as "&lt;" or "&gt;", or to refer to external data.The entity codec encodes and decodes entity/symbol pairs.</p> 
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>


</function>
<function>
<name>EntityAddEntityString</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityAddEntityString(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr,char *str);</syntax>

<description><p>The <fn href="EntityAddEntityString.html">EntityAddEntityString</fn> function adds an entity definition to an entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The text that defines the entity is stored in the zero terminated string pointed to by the argument <ar>str</ar>.</p>
<p>An entity is often used as short hand for repeated text, to refer to symbols that would otherwise confuse the XML passer, such as "&lt;" or "&gt;", or to refer to external data.The entity codec encodes and decodes entity/symbol pairs.</p> 
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>



</function>
<function>
<name>EntityAddEntityStringArray</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityAddEntityStringArray(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr,char **str);</syntax>

<description><p>The <fn href="EntityAddEntityStringArray.html">EntityAddEntityStringArray</fn> function adds a group of entity definitions to an entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The text that defines the entities is stored in the array of zero terminated strings pointed to by the argument <ar>str</ar>.</p>
<p>An entity is often used as short hand for repeated text, to refer to symbols that would otherwise confuse the XML passer, such as "&lt;" or "&gt;", or to refer to external data.The entity codec encodes and decodes entity/symbol pairs.</p> 
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>



</function>
<function>
<name>EntityAddSymbol</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityAddSymbol(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr, <sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *symbol);</syntax>

<description><p>The <fn href="EntityAddSymbol.html">EntityAddSymbol</fn> function adds the equivalent symbol for an entity (the text used to replace the entity) to an entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The text that defines the symbol is stored in the structure pointed to by the argument <ar>entity</ar>.</p>
<p>An entity is often used as short hand for repeated text, to refer to symbols that would otherwise confuse the XML passer, such as "&lt;" or "&gt;", or to refer to external data.The entity codec encodes and decodes entity/symbol pairs.</p> 
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>


</function>
<function>
<name>EntityAddSymbolString</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityAddSymbolString(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr,char *str);</syntax>

<description><p>The <fn href="EntityAddSymbolString.html">EntityAddSymbolString</fn> function adds the equivalent symbol for an entity (the text used to replace the entity) to an entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The text that defines the symbol is stored in the zero terminated string pointed to by the argument <ar>str</ar>.</p>
<p>An entity is often used as short hand for repeated text, to refer to symbols that would otherwise confuse the XML passer, such as "&lt;" or "&gt;", or to refer to external data.The entity codec encodes and decodes entity/symbol pairs.</p> 
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>



</function>
<function>
<name>EntityAddSymbolStringArray</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityAddSymbolStringArray(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr,char **str);</syntax>
</function>

<description><p>The <fn href="EntityAddSymbolString.html">EntityAddSymbolStringArray</fn> function adds a group of equivalent symbols for a group of  entities (the text used to replace the entity) to an entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The text that defines the symbols is stored in the array of zero terminated string pointed to by the argument <ar>str</ar>.</p>
<p>An entity is often used as short hand for repeated text, to refer to symbols that would otherwise confuse the XML passer, such as "&lt;" or "&gt;", or to refer to external data.The entity codec encodes and decodes entity/symbol pairs.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>

<function>
<name>EntityDecode</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityDecode(char *buf,int sze,void *data);</syntax>

<description><p>The <fn href="EntityDecode.html">EntityDecode</fn> function decodes any entities found in a data stream.</p>
<p>The data to process is stored in the text pointer to by the argument <ar>buf</ar>, and the number of bytes in the buffer is given by the argument <ar>sze</ar>.</p>
<p>The argument <ar>data</ar> is assumed to be a pointer to a structure of type <sn href="structEntitydata.html">struct Entitydata</sn>. The function will automatically cast the argument as a pointer of this type.</p>
<p>The unusual syntax allows this function to be used as a text decoder or parser for other libraries.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>




</function>
<function>
<name>EntityDecodeBuffer</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *EntityDecodeBuffer(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr, <sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *src);</syntax>

<description><p>The <fn href="EntityDecodeBuffer.html">EntityDecodeBuffer</fn> function decodes any entities found in a data stream and stores the processed data in a buffer.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The data to process is stored in the text pointer to by the argument <ar>buf</ar>, and the number of bytes in the buffer is given by the argument <ar>sze</ar>.</p>
</description>

<returns>Returns a pointer to the decoded buffer on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error a <code>NULL</code> pointer is returned.</errors>




</function>
<function>
<name>EntityEncode</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntityEncode(char *buf,int sze,void *data);</syntax>

<description><p>The <fn href="EntityEncode.html">EntityEncode</fn> function encodes any symbols found in a data stream into entities.</p>
<p>The data to process is stored in the text pointer to by the argument <ar>buf</ar>, and the number of bytes in the buffer is given by the argument <ar>sze</ar>.</p>
<p>The argument <ar>data</ar> is assumed to be a pointer to a structure of type <sn href="structEntitydata.html">struct Entitydata</sn>. The function will automatically cast the argument as a pointer of this type.</p>
<p>The unusual syntax allows this function to be used as a text decoder or parser for other libraries.</p>
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error (-1) is returned.</errors>




</function>
<function>
<name>EntityEncodeBuffer</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *EntityEncodeBuffer(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr, <sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *src);</syntax>


<description><p>The <fn href="EntityEncodeBuffer.html">EntityEncodeBuffer</fn> function encodes any symbols found in a data stream as entities and stores the processed data in a buffer.</p>
<p>The argument <ar>ptr</ar> points to the control structure. The data to process is stored in the text pointer to by the argument <ar>buf</ar>, and the number of bytes in the buffer is given by the argument <ar>sze</ar>.</p>
</description>

<returns>Returns a pointer to the encoded buffer on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error a <code>NULL</code> pointer is returned.</errors>



</function>
<function>
<name>EntityFree</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>void EntityFree(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr);</syntax>

<description><p>The <fn href="EntityFree.html">EntityFree</fn> function frees the memory used to store the control structure for the entity codec.</p>
<p>The argument <ar>ptr</ar> points to the control structure.</p>
</description>


</function>
<function>
<name>EntityFreeEntity</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>void EntityFreeEntity(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr);</syntax>



<description><p>The <fn href="EntityFreeEntity.html">EntityFreeEntity</fn> function frees the memory used to store the entity table in entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure.</p>
</description>




</function>
<function>
<name>EntityFreeSymbol</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>void EntityFreeSymbol(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr);</syntax>

<description><p>The <fn href="EntityFreeSymbol.html">EntityFreeSymbol</fn> function frees the memory used to store the symbol table in entity codec control structure.</p>
<p>The argument <ar>ptr</ar> points to the control structure.</p>
</description>



</function>
<function>
<name>EntityMake</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax><sn href="structEntitydata.html">struct Entitydata</sn> *EntityMake();</syntax>

<description><p>The <fn href="EntityMake.html">EntityMake</fn> function allocates the memory used to store the entity codec control structure.</p>

</description>


<returns>Returns a pointer to the control structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error a <code>NULL</code> pointer is returned.</errors>

</function>
<function>
<name>EntitySetDecodeTrap</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntitySetDecodeTrap(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr, int (*text)(char *,int, void *),void *data);</syntax>
</function>
<function>
<name>EntitySetEncodeTrap</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntitySetEncodeTrap(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr, int (*text)(char *,int, void *),void *data);</syntax>
</function>
<function>
<name>EntitySetText</name>
<location>src.lib/xml/xmldb</location>
<header>base/entity.h</header>
<syntax>int EntitySetText(<sn href="structEntitydata.html">struct Entitydata</sn> *ptr, int (*text)(char *,int, void *),void *data);</syntax>


<description><p>The <fn href="EntitySetText.html">EntitySetText</fn> function sets the interface function used to process output from the entity codec.</p>
<p>The data structure associated with the enitity codec is pointed to by the argument <ar>ptr</ar>.</p>
<p>The argument <ar>user</ar> is a pointer to a function of the form:</p>
<fd>
int user(char *buffer,int size,void *dptr);
</fd>
<p>This function is called each time the entity codec either encodes or decodes data.</p>
<p>The argument <ar>buffer</ar> is a pointer to a buffer containing the encoded or decoded data buffer and the argument <ar>size</ar> indicates the size of the buffer.</p>
<p>The <ar>data</ar> argument of the <fn href="EntitySetText.html">EntitySetText</fn> function  is passed directly as the <ar>dptr</ar> argument and allows extra parameters to be passed to the function.</p>

</description>



</function>
<function>
<name>XMLDBAddBuffer</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBAddBuffer(<sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *ptr,char *str,int sze);</syntax>
</function>
<function>
<name>XMLDBAddTable</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBAddTable(<sn href="structXMLDBtable.html">struct XMLDBtable</sn> *ptr,<sn href="structXMLDBelement.html">XMLDBelement</sn> *element);</syntax>
</function>
<function>
<name>XMLDBBuildTree</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBBuildTree(char *path,char delim,<sn href="structXMLDBtree.html">struct XMLDBtree</sn> *ptr);</syntax>
</function>
<function>
<name>XMLDBCopyBuffer</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *XMLDBCopyBuffer(<sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *src);</syntax>
</function>
<function>
<name>XMLDBElementEnd</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBElementEnd(char *name,char *buf,int sze,void *data);</syntax>
</function>
<function>
<name>XMLDBElementStart</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBElementStart(char *name,int atnum,char **atname,char **atval, char *buf,int sze,void *data);</syntax>
</function>
<function>
<name>XMLDBElementText</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBElementText(char *buf,int sze,void *data);</syntax>
</function>
<function>
<name>XMLDBEnd</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBEnd(char *name,char *buf,int sze,void *data);</syntax>
</function>
<function>
<name>XMLDBFree</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>void XMLDBFree(<sn href="structXMLDBdata.html">struct XMLDBdata</sn> *ptr);</syntax>
</function>
<function>
<name>XMLDBFreeBuffer</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>void XMLDBFreeBuffer(<sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *ptr);</syntax>
</function>
<function>
<name>XMLDBFreeElement</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>void XMLDBFreeElement(<sn href="structXMLDBelement.html">XMLDBelement</sn> *ptr);</syntax>
</function>
<function>
<name>XMLDBFreeTable</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>void XMLDBFreeTable(<sn href="structXMLDBtable.html">struct XMLDBtable</sn> *ptr);</syntax>
</function>
<function>
<name>XMLDBFreeTree</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>void XMLDBFreeTree(<sn href="structXMLDBtree.html">struct XMLDBtree</sn> *ptr);</syntax>
</function>
<function>
<name>XMLDBMake</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax><sn href="structXMLDBdata.html">struct XMLDBdata</sn> *XMLDBMake(<sn href="&root;/base/src.lib/xml/xml/structXMLdata.html">struct XMLdata</sn> *xml);</syntax>
</function>
<function>
<name>XMLDBMakeBuffer</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *XMLDBMakeBuffer(int stp);</syntax>
</function>
<function>
<name>XMLDBMakeElement</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax><sn href="structXMLDBelement.html">XMLDBelement</sn> *XMLDBMakeElement(char *name,int atnum,  char **atname,char **atval,int stp);</syntax>
</function>
<function>
<name>XMLDBMakeTable</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax><sn href="structXMLDBtable.html">struct XMLDBtable</sn> *XMLDBMakeTable();</syntax>
</function>
<function>
<name>XMLDBMakeTree</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax><sn href="structXMLDBtree.html">struct XMLDBtree</sn> *XMLDBMakeTree();</syntax>
</function>
<function>
<name>XMLDBPeerEnd</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBPeerEnd(char *name,char *buf,int sze,void *data);</syntax>
</function>
<function>
<name>XMLDBPeerStart</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBPeerStart(char *name,int atnum,char **atname,char **atval, char *buf,int sze,void *data);</syntax>
</function>
<function>
<name>XMLDBRemoveTable</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBRemoveTable(<sn href="structXMLDBtable.html">struct XMLDBtable</sn> *ptr);</syntax>
</function>
<function>
<name>XMLDBSetText</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBSetText(<sn href="structXMLDBdata.html">struct XMLDBdata</sn> *ptr, int (*text)(<sn href="structXMLDBtable.html">struct XMLDBtable</sn> *,<sn href="structXMLDBtable.html">struct XMLDBtable</sn> *, void *),void *data);</syntax>
</function>
<function>
<name>XMLDBSetTree</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBSetTree(<sn href="structXMLDBdata.html">struct XMLDBdata</sn> *ptr,<sn href="structXMLDBtree.html">struct XMLDBtree</sn> *tree);</syntax>
</function>
<function>
<name>XMLDBStart</name>
<location>src.lib/xml/xmldb</location>
<header>base/rxmldb.h</header>
<syntax>int XMLDBStart(char *name,int atnum,char **atname,char **atval, char *buf,int sze,void *data);</syntax>
</function>




<structure>
 <name>Entitydata</name>
 <location>src.lib/xml/xmldb</location>
 <header>base/entity.h</header>
 <struct>
    <member>
      <struct>
         <member>
           <proto>int num;</proto>
           <description>None.</description>
         </member>
         <member>
           <proto><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> **buf;</proto>
           <description>None.</description>
         </member>
         <member>
           <proto>int *state;</proto>
           <description>None.</description>
         </member>
       </struct>
       <proto>entity;</proto>
       <description>None.</description>
    </member>
 <member>
      <struct>
         <member>
           <proto>int num;</proto>
           <description>None.</description>
         </member>
         <member>
           <proto><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> **buf;</proto>
           <description>None.</description>
         </member>
         <member>
           <proto>int *state;</proto>
           <description>None.</description>
         </member>
       </struct>
       <proto>symbol;</proto>
       <description>None.</description>
    </member>
    <member>
      <proto>char *buf;</proto>
      <description>None.</description>
   </member>
   <member>
      <proto>int sze;</proto>
      <description>None.</description>
   </member>
   <member>
      <proto>int max;</proto>
      <description>None.</description>
   </member>
   <member>
      <proto>int stp;</proto>
      <description>None.</description>
   </member>
   <member>
      <struct>
         <member>
            <proto>int (*user)(char *buf,int sze,void *data);</proto>
            <description>None.</description>
         </member>
         <member>
            <proto>void *data;</proto>
            <description>None.</description>
         </member>
      </struct>
      <proto>text;</proto>
      <description>None.</description>
   </member>
  </struct>
</structure>


<structure>
 <name>XMLDBbuffer</name>
 <location>src.lib/xml/xmldb</location>
 <header>base/rxmldb.h</header>
 <struct>
   <member>
     <proto>int sze;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto>int max;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto>int stp;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto>char *buf;</proto>
     <description>None.</description>
   </member>
 </struct>
</structure>

<structure>
 <name>XMLDBdata</name>
 <location>src.lib/xml/xmldb</location>
 <header>base/rxmldb.h</header>
 <struct>
   <member>
     <proto><sn href="&root;/base/src.lib/xml/xml/structXMLdata.html">struct XMLdata</sn> *ptr;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto><sn href="structXMLDBtree.html">struct XMLDBtree</sn> *tree;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto><sn href="structXMLDBtable.html">struct XMLDBtable</sn> *doc;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *buf;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto><sn href="structXMLDBtable.html">struct XMLDBtable</sn> *table;</proto>
     <description>None.</description>
   </member>
   <member>
     <struct>
       <member>
         <proto>int (*user)(<sn href="structXMLDBtable.html">struct XMLDBtable</sn> *,<sn href="structXMLDBtable.html">struct XMLDBtable</sn> *,void *data);</proto>
	 <description>None.</description>
       </member>
       <member>
          <proto>void *data;</proto>
          <description>None.</description>
       </member>
     </struct>
     <proto>text;</proto>
     <description>None.</description>
   </member>
   <member>
      <proto>int depth;</proto>
      <description>None.</description>
   </member>
  </struct>
</structure>



<structure>
 <name>XMLDBelement</name>
 <location>src.lib/xml/xmldb</location>
 <header>base/rxmldb.h</header>
 <struct>
   <member>
     <proto>char *name;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto>int atnum;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto>char **atname;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto>char **atval;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto><sn href="structXMLDBbuffer.html">struct XMLDBbuffer</sn> *data;</proto>
     <description>None.</description>
   </member>
 </struct>
</structure>


<structure>
 <name>XMLDBtable</name>
 <location>src.lib/xml/xmldb</location>
 <header>base/rxmldb.h</header>
 <struct>
   <member>
     <proto>int num;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto><sn href="structXMLDBelement.html">XMLDBelement</sn> **element;</proto>
     <description>None.</description>
   </member>
  </struct>
</structure>

<structure>
 <name>XMLDBtree</name>
 <location>src.lib/xml/xmldb</location>
 <header>base/rxmldb.h</header>
 <struct>
   <member>
     <proto>int depth;</proto>
     <description>None.</description>
   </member>
   <member>
     <proto>char **name;</proto>
     <description>None.</description>
   </member>
  </struct>
</structure>




</library>
