<?xml version="1.0" encoding="ISO-8859-1"?>
<library>
<project>general</project>
<name>map</name>
<location>src.lib/map</location>
<function>
<name>MapBndFread</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax><sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *MapBndFread(FILE *fp);</syntax>
<description><p>The <fn href="MapBndFread.html">MapBndFread</fn> function reads a set of state boundaries from a stream.</p>
<p>The boundaries are read from the stream pointed to by the argument <ar>fp</ar>.</p>
</description>
<returns>Returns a pointer to the set of polygons that make up the boundaries. If an error occurs a <code>NULL</code> pointer is returned.</returns>
<errors>If an error occurs a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">MapBndFread</example>  
<example type="source">MapBndFread.c</example>
</function>

<function>
<name>MapCircleClip</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax><sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *MapCircleClip(float step);</syntax>
<description><p>The <fn href="MapCircleClip.html">MapCircleClip</fn> function generates a circular polygon that can be used as a clipping volume.</p>
<p>The argument <ar>step</ar> is the angle in degrees between vertices of the polygon.</p>
</description>
<returns>Returns a pointer to the clipping polygon. If an error occurs a <code>NULL</code> pointer is returned.</returns>
<errors>If an error occurs a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">MapCircleClip</example>  
<example type="source">MapCircleClip.c</example>
</function>

<function>
<name>MapCylindrical</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>int MapCylindrical(int ssze,void *src,int dsze,void *dst,void *data);</syntax>
<description><p>The <fn href="MapCylindrical.html">MapCylindrical</fn> performs a cylindrical projection of a map coordinate.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the longitude and latitude of the coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the cartesian coordinates calculated from the transform. The coordinates are normalized so that they range from zero to (1).</p>
<p>The argument <ar>data</ar> is a pointer to an array of single precision floating point numbers that contains the parameters of the transform. The first two elements of the array define the latitude and longitude of the center of the projection.</p>
</description>
<returns>Returns zero if the transformation was successful.On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">MapCylindrical</example>  
<example type="source">MapCylindrical.c</example>
</function>

<function>
<name>MapFread</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax><sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *MapFread(FILE *fp);</syntax>
<description><p>The <fn href="MapFread.html">MapFread</fn> function reads a set of coastline data from a stream.</p>
<p>The coastlines are read from the stream pointed to by the argument <ar>fp</ar>.</p>
</description>
<returns>Returns a pointer to the set of polygons that make up the coastlines. If an error occurs a <code>NULL</code> pointer is returned.</returns>
<errors>If an error occurs a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">MapFread</example>  
<example type="source">MapFread.c</example>
</function>

<function>
<name>MapGeneralVerticalPerspective</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>int MapGeneralVerticalPerspective(int ssze,void *src,int dsze, void *dst,void *data);</syntax>
<description><p>The <fn href="MapGeneralVerticalPerspective.html">MapGeneralVerticalPerspective</fn> performs a general vertical perspective projection of a map coordinate.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the longitude and latitude of the coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the cartesian coordinates calculated from the transform. The coordinates are normalized so that they range from zero to (1).</p>
<p>The argument <ar>data</ar> is a pointer to an array of single precision floating point numbers that contains the parameters of the transform. The first two elements of the array define the latitude and longitude of the center of the projection. The third element is a scaling factor for the projection. The final element is a flag indicating whether the projection should be mirrored about the y-axis.</p>
</description>
<returns>Returns zero if the transformation was successful.On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">MapGeneralVerticalPerspective</example>  
<example type="source">MapGeneralVerticalPerspective.c</example>
</function>

<function>
<name>MapMercator</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>int MapMercator(int ssze,void *src,int dsze,void *dst,void *data);</syntax>
<description><p>The <fn href="MapMercator.html">MapMercator</fn> performs a mercator projection of a map coordinate.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the longitude and latitude of the coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the cartesian coordinates calculated from the transform. The coordinates are normalized so that they range from zero to (1).</p>
<p>The argument <ar>data</ar> is a pointer to an array of single precision floating point numbers that contains the parameters of the transform. The first two elements of the array define the latitude and longitude of the center of the projection.</p>
</description>
<returns>Returns zero if the transformation was successful.On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">MapMercator</example>  
<example type="source">MapMercator.c</example>
</function>

<function>
<name>MapOrthographic</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>int MapOrthographic(int ssze,void *src,int dsze,void *dst,void *data);</syntax>
<description><p>The <fn href="MapOrthographic.html">MapOrthographic</fn> performs a orthographic projection of a map coordinate.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the longitude and latitude of the coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the cartesian coordinates calculated from the transform. The coordinates are normalized so that they range from zero to (1).</p>
<p>The argument <ar>data</ar> is a pointer to an array of single precision floating point numbers that contains the parameters of the transform. The first two elements of the array define the latitude and longitude of the center of the projection.The final element is a flag indicating whether the projection should be mirrored about the y-axis.</p>
</description>
<returns>Returns zero if the transformation was successful.On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">MapOrthographic</example>  
<example type="source">MapOrthographic.c</example>
</function>

<function>
<name>MapPlotOpenPolygon</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>void MapPlotOpenPolygon(<sn href="&root;/src.lib/base/graphic/rplot/structRplot.html">struct Rplot</sn> *rplot,<sn href="&root;/src.lib/base/graphic/rplot/structRplotMatrix.html">struct RplotMatrix</sn> *matrix, float x,float y,float w,float h, unsigned int color,unsigned char mask, float width,<sn href="&root;/src.lib/base/graphic/rplot/structRplotDash.html">struct RplotDash</sn> *dash, <sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *poly,int type);</syntax>
<description><p>The <fn href="MapPlotOpenPolygon.html">MapPlotOpenPolygon</fn> function plots sets of polygons whose last vertex is not identical to the first vertex, making them open polygons.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure that handles the plotting. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the polygons. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position at which the polygons are plotted and the size of the plot are given by the arguments <ar>x</ar>, <ar>y</ar>, <ar>w</ar> and <ar>h</ar>. The coordinates of the polygons data are assumed to be normalized between zero and (1). The x-coordinate is multiplied by <ar>w</ar> and the y-coordinate by <ar>h</ar> and then offset given by <ar>x</ar> and <ar>y</ar> are applied.</p>
<p>The color used to plot the polygon is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit number. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to 0x0f will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The width of the line used to plot the polygons is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the polygon is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
<p>The argument <ar>poly</ar> points to the polygon data to plot. Only polygons whose type code matches the argument <ar>type</ar> are plotted.</p>
</description>
<example type="rplot">MapPlotOpenPolygon</example>  
<example type="source">MapPlotOpenPolygon.c</example>
</function>

<function>
<name>MapPlotPolygon</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>void MapPlotPolygon(<sn href="&root;/src.lib/base/graphic/rplot/structRplot.html">struct Rplot</sn> *rplot,<sn href="&root;/src.lib/base/graphic/rplot/structRplotMatrix.html">struct RplotMatrix</sn> *matrix, float x,float y,float w,float h,int fill, unsigned int color,unsigned char mask, float width,<sn href="&root;/src.lib/base/graphic/rplot/structRplotDash.html">struct RplotDash</sn> *dash, <sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *poly,int type);</syntax>
<description><p>The <fn href="MapPlotPolygon.html">MapPlotPolygon</fn> function plots sets of polygons.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure that handles the plotting. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the polygons. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position at which the polygons are plotted and the size of the plot are given by the arguments <ar>x</ar>, <ar>y</ar>, <ar>w</ar> and <ar>h</ar>. The coordinates of the polygons data are assumed to be normalized between zero and (1). The x-coordinate is multiplied by <ar>w</ar> and the y-coordinate by <ar>h</ar> and then offset given by <ar>x</ar> and <ar>y</ar> are applied.</p>
<p>If the argument <ar>fill</ar> is set to a non-zero value then the polygons will be plotted as solid shapes, not outlines.</p>
<p>The color used to plot the polygon is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit number. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to 0x0f will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The width of the line used to plot the polygons is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the polygon is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
<p>The argument <ar>poly</ar> points to the polygon data to plot. Only polygons whose type code matches the argument <ar>type</ar> are plotted.</p>
</description>
<example type="rplot">MapPlotPolygon</example>  
<example type="source">MapPlotPolygon.c</example>
</function>

<function>
<name>MapSquareClip</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax><sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *MapSquareClip();</syntax>
<description><p>The <fn href="MapSquareClip.html">MapSquareClip</fn> function generates a square polygon that can be used as a clipping volume.</p>
</description>
<returns>Returns a pointer to the clipping polygon. If an error occurs a <code>NULL</code> pointer is returned.</returns>
<errors>If an error occurs a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">MapSquareClip</example>  
<example type="source">MapSquareClip.c</example>
</function>

<function>
<name>MapStereographic</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>int MapStereographic(int ssze,void *src,int dsze,void *dst,void *data);</syntax>
<description><p>The <fn href="MapStereographic.html">MapStereographic</fn> performs a stereographic projection of a map coordinate.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the longitude and latitude of the coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the cartesian coordinates calculated from the transform. The coordinates are normalized so that they range from zero to (1).</p>
<p>The argument <ar>data</ar> is a pointer to an array of single precision floating point numbers that contains the parameters of the transform. The first two elements of the array define the latitude and longitude of the center of the projection. The third element is a scaling factor for the projection. The final element is a flag indicating whether the projection should be mirrored about the y-axis.</p>
</description>
<returns>Returns zero if the transformation was successful.On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">MapStereographic</example>  
<example type="source">MapStereographic.c</example>
</function>

<function>
<name>MapTransverseMercator</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax>int MapTransverseMercator(int ssze,void *src,int dsze,void *dst,void *data);</syntax>
<description><p>The <fn href="MapTransverseMercator.html">MapTransverseMercator</fn> performs a general vertical perspective projection of a map coordinate.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the longitude and latitude of the coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the cartesian coordinates calculated from the transform. The coordinates are normalized so that they range from zero to (1).</p>
<p>The argument <ar>data</ar> is a pointer to an array of single precision floating point numbers that contains the parameters of the transform. The first two elements of the array define the latitude and longitude of the center of the projection.</p>
</description>
<returns>Returns zero if the transformation was successful.On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">MapTransverseMercator</example>  
<example type="source">MapTransverseMercator.c</example>
</function>

<function>
<name>MapWraparound</name>
<location>src.lib/map</location>
<header>general/rmap.h</header>
<syntax><sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *MapWraparound(<sn href="&root;/general/src.lib/polygon/structPolygonData.html">struct PolygonData</sn> *map);</syntax>
<description><p>The <fn href="MapWraparound.html">MapWraparound</fn> duplicates polygons so that cylindrical map projections are plotted correctly</p>
<p>The set of polygons to duplicate is pointed to by the argument <ar>map</ar>.</p>
</description>
<returns>Returns a pointer to the new set of polygons. If an error occurs a <code>NULL</code> pointer is returned.</returns>
<errors>If an error occurs a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">MapWraparound</example>  
<example type="source">MapWraparound.c</example>
</function>

</library>
