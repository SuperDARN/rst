<?xml version="1.0" encoding="ISO-8859-1"?>
<library>
<project>general</project>
<name>sort</name>
<location>src.lib/sort</location>


<function>
<name>smart_sort</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void smart_sort(int num, double array[]);</syntax>
<description><p>The <fn href="smart_sort.html">smart_sort</fn> function re-arranges the doubles provided in `array` (with length `num`) to be ordered from least to greatest using the fastest of two sorting algorithms.</p>
</description>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
<error>If there are problems assigning data to the subarrays, the routine will exit with -1.</error>
</function>

<function>
<name>smart_argsort_float</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void smart_argsort_float(int num, float array[], int sortargs[]);</syntax>
<description><p>The <fn href="smart_argsort_float.html">smart_argsort_float</fn> function maintains the order of the input data in `array` (with length `num`) and returns the zero-index integers needed to ordered input data from least to greatest in `sortargs`.</p>
</description>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
<error>If there are problems assigning data to the subarrays, the routine will exit with -1.</error>
</function>

<function>
<name>smart_argsort_int</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void smart_argsort_int(int num, int array[], int sortargs[]);</syntax>
<description><p>The <fn href="smart_argsort_int.html">smart_argsort_int</fn> function maintains the order of the input data in `array` (with length `num`) and returns the zero-index integers needed to ordered input data from least to greatest in `sortargs`.</p>
</description>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
<error>If there are problems assigning data to the subarrays, the routine will exit with -1.</error>
</function>

<function>
<name>smart_sort_int</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void smart_sort_int(int num, int array[]);</syntax>
<description><p>The <fn href="smart_sort_int.html">smart_sort_int</fn> function
re-arranges the integers provided in `array` (with length `num`) to be ordered from least to greatest using the fastest of two sorting algorithms.</p>
</description>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
<error>If there are problems assigning data to the subarrays, the routine will exit with -1.</error>
</function>

<function>
<name>straight_sort</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void straight_sort(int num, double array[]);</syntax>
<description><p>The <fn href="straight_sort.html">straight_sort</fn> function
re-arranges the doubles provided in `array` (with length `num`) to be ordered from least to greatest.</p>
<p>This function uses the straight insertion method for sorting. This is an <name>N<sup>2</sup></name> method, best for N (`num`) less than 20.</p>
</description>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
</function>

<function>
<name>straight_sort_int</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void straight_sort_int(int num, int array[]);</syntax>
<description><p>The <fn href="straight_sort_int.html">straight_sort_int</fn> function re-arranges the integers provided in `array` (with length `num`) to be ordered from least to greatest.</p>
<p>This function uses the straight insertion method for sorting. This is an <name>N<sup>2</sup></name> method, best for N (`num`) less than 20.</p>
</description>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
</function>

<function>
<name>straight_argsort</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void straight_argsort(short int num, int array[], int argout[]);</syntax>
<description><p>The <fn href="straight_argsort.html">straight_argsort</fn> function maintains the integers provided in `array` (with length `num`) and provides the zero-indexed integers needed to order the input from least to greatest in `argout`.</p>
<p>This function uses the straight insertion method for sorting. This is an <name>N<sup>2</sup></name> method, best for N (`num`) less than 20.</p>
</description>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
</function>

<function>
<name>quicksort</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void quicksort(int num, double array[]);</syntax>
<description><p>The <fn href="quicksort.html">quicksort</fn> function re-arranges the doubles provided in `array` (with length `num`) to be ordered from least to greatest.</p>
<p>This function is typically the fastest sorting algorithm for large N (`num`).</p>
</description>
<error>If there are problems assigning data to the subarrays, the routine will exit with -1.</error>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
</function>

<function>
<name>quicksort_int</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void quicksort_int(int num, int array[]);</syntax>
<description><p>The <fn href="quicksort_int.html">quicksort_int</fn> function re-arranges the integers provided in `array` (with length `num`) to be ordered from least to greatest.</p>
<p>This function is typically the fastest sorting algorithm for large N (`num`).</p>
</description>
<error>If there are problems assigning data to the subarrays, the routine will exit with -1.</error>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
</function>

<function>
<name>quickargsort</name>
<location>src.lib/sort</location>
<header>general/sort.h</header>
<syntax>void quickargsort(int num, double array[], int argout[]);</syntax>
<description><p>The <fn href="quickargsort.html">quickargsort</fn> function maintains the doubles provided in `array` (with length `num`) and provides an array of zero-indexed integers that will order the input data from least to greatest in `argout`.</p>
<p>This function is typically the fastest sorting algorithm for large N (`num`).</p>
</description>
<error>If there are problems assigning data to the subarrays, the routine will exit with -1.</error>
<reference>Numerical Recipes in C, 2nd Ed.</reference>
</function>

</library>
