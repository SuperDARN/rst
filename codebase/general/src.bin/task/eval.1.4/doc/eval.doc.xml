<?xml version="1.0" encoding="ISO-8859-1"?>
<binary>
<project>general</project>
<name>rst_eval</name>
<location>src.bin/task/eval</location>
<syntax>rst_eval --help</syntax>
<syntax>rst_eval [-c <ar>cast</ar>] [-f <ar>format</ar>] <ar>expr</ar></syntax>

<option><on>--help</on><od>print the help message and exit.</od>
</option>
<option><on>--version</on><od>print the RST version number and exit.</od>
</option>
<option><on>-c <ar>cast</ar></on><od>force the final calculated value of the expression to be <ar>cast</ar> data type.</od>
</option>
<option><on>-f <ar>format</ar></on><od>use the string <ar>format</ar> to format the output text. The string uses the printf syntax. </od>
</option>
<option><on><ar>expr</ar></on><od>the mathematical expression to evaluate.</od>
</option>
<synopsis><p>Evaluate a mathematical expression.</p></synopsis>
<description><p>Evaluate a mathematical expression.</p>
<p>The calculated value is written to standard output</p>
<p>The expression to evaluate should be quoted.</p>
</description>

<example>
<command>rst_eval "2.5*3.12/6"</command>
<description>Evaluate 2.5*3.12/6.</description>
</example>

<example>
<command>rst_eval -c int -f "%d" "2.3*0.5"</command>
<description>Evaluate 2.3*0.5, convert the result to an integer and print it using the format "<code>%d</code>".</description>
</example>

</binary>
