<?xml version="1.0" encoding="ISO-8859-1"?>
<library>
<project>superdarn</project>
<name>fit</name>
<location>src.lib/tk/fit</location>

<function>
<name>FitDecode</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitread.h</header>
<syntax>int FitDecode(<sn href="&root;/general/src.lib/dmap/structDataMap.html">struct DataMap</sn> *ptr,<sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm *prm</sn>, <sn href="structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitDecode.html">FitDecode</fn> function decodes a <code>fitacf</code> data record from a <code>DataMap</code> structure.</p>
<p>The <code>DataMap</code> structure is pointed to by the argument <ar>ptr</ar>. The data is decoded and used to populate the radar parameter block pointed to by the argument <ar>prm</ar> and the <code>fit</code> data structure pointed to by the argument <ar>fit</ar>.</p>  
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitDecode.c</example>
</function>

<function>
<name>FitFread</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitread.h</header>
<syntax>int FitFread(FILE *fp, <sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitFread.html">FitFread</fn> function reads a <code>fitacf</code> data record from an open stream.</p>
<p>The data is read from the open stream pointed to by the argument <ar>fp</ar>. The data is decoded and used to populate the radar parameter block pointed to by the argument <ar>prm</ar> and the <code>fit</code> data structure pointed to by the argument <ar>fit</ar>.</p>  
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitFread.c</example>
</function>

<function>
<name>FitFreadRadarScan</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitscan.h</header>
<syntax>int FitFreadRadarScan(FILE *fp,int *state, <sn href="&root;/superdarn/src.lib/tk/scan/structRadarScan.html">struct RadarScan</sn> *ptr, <sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="&root;/superdarn/src.lib/tk/fit/structFitData.html">struct FitData</sn> *fit, int tlen, int lock,int chn);</syntax>
<description><p>The <fn href="FitFreadRadarScan.html">FitFReadRadarScan</fn> function reads one full scan of data from a <code>fitacf</code> data file.</p>
<p>The data is read from the stream pointed to by the argument <ar>fp</ar>.</p>
<p>The argument <ar>state</ar> is a pointer to an integer that is used internally by the function to track progress through the <code>fit</code> file. Initially this integer should be set to zero, indicating that no data has been read from the file yet. The other possible value of <ar>state</ar> are (1), indicating that a complete scan was read from the file and data from the next scan is pending, or (2) indicating that a file error occurred.</p>
<p>The scan data is written to the structure pointed to by the argument <ar>ptr</ar>. Memory is automatically allocated within this structure to store the beam data.</p>
<p>In order for the function to correctly identify a scan boundary, it must read the first beam from the subsequent scan. This data must be preserved so that it can be included in the next block of scan data returned by the next call to the function. This is done by providing storage for the radar parameter block and the fit data pointed to by the arguments <ar>prm</ar> and <ar>fit</ar>.</p>
<p>If the argument <ar>tlen</ar> has a non-zero value then the function will ignore the scan flag and instead assume the the scan has a length of <ar>tlen</ar> seconds. If the argument <ar>lock</ar> has a non-zero value it is also assumed that the scan boundaries are fixed relative to the start of the day.</p>
<p>If the final argument <ar>chn</ar>, is compared against the channel number recorded in the radar parameter block, if the two numbers do not match then the data record is excludef from the scan.</p>
</description> 
<returns>Returns zero on success, or (1) if the end of file was reached. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitFreadRadarScan.c</example>
</function>

<function>
<name>FitFseek</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitseek.h</header>
<syntax>int FitFseek(FILE *fp, int yr,int mo,int dy,int hr,int mt,int sc,double *atme, <sn href="structFitIndex.html">struct FitIndex</sn> *inx);</syntax>
<description><p>The <fn href="FitFseek.html">FitFseek</fn> function searches for a <code>fitacf</code> data record for a specific time.</p>
<p>The search is performed on the open stream pointed to by the argument <ar>fp</ar>. The time to search for is specified by the arguments <ar>yr</ar>, <ar>mo</ar>,<ar>dy</ar>,<ar>hr</ar>,<ar>mt</ar>,<ar>sc</ar> giving the year, month, day, hour, minute and second.</p>
<p>The argument <ar>atme</ar> is a pointer to a double precision floating point number that is used to store the time of the closest record to the time requested expressed in seconds from 0:00UT January 1, 1970. If this argument is set to a <code>NULL</code> pointer then the time is not returned.</p>  
<p>If the <code>fitacf</code> file has an associated index that has been loaded, then it can be used to speed up the search by setting the argument <ar>inx</ar> to point to it.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitFseek.c</example>
</function>

<function>
<name>FitFwrite</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitwrite.h</header>
<syntax>int FitFwrite(FILE *fp,<sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitFwrite.html">FitFwrite</fn> function writes a <code>fitacf</code> data record to an open stream.</p>
<p>The data is written to the open stream pointed to by the argument <ar>fp</ar>. The data record is contructed the radar parameter block pointed to by the argument <ar>prm</ar> and the <code>fit</code> data structure pointer to by the argument <ar>fit</ar>.</p>  
</description>
<returns>Returns the number of bytes written on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitFwrite.c</example>
</function>

<function>
<name>FitIndexFload</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitindex.h</header>
<syntax><sn href="structFitIndex.html">struct FitIndex</sn> *FitIndexFload(FILE *fp);</syntax>
<description><p>The <fn href="FitIndexFload.html">FitIndexFload</fn> function loads an index to a <code>fitacf</code> data file.</p>
<p>The index is loaded from the open stream pointed to by the argument <ar>fp</ar>.</p>  
</description>
<returns>Returns a pointer to a structure containing the index on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">FitIndexFload.c</example>
</function>

<function>
<name>FitIndexFree</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitindex.h</header>
<syntax>void FitIndexFree(<sn href="structFitIndex.html">struct FitIndex</sn> *ptr);</syntax>
<description><p>The <fn href="FitIndexFree.html">FitIndexFree</fn> function frees memory allocated to store an index to a <code>fitacf</code> file.</p>
<p>The index structure is pointed to by the argument <ar>ptr</ar>.</p>
</description>
<example type="source">FitIndexFree.c</example>
</function>

<function>
<name>FitIndexLoad</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitindex.h</header>
<syntax><sn href="structFitIndex.html">struct FitIndex</sn> *FitIndexLoad(int fid);</syntax>
<description><p>The <fn href="FitIndexLoad.html">FitIndexLoad</fn> function loads an index to a <code>fitacf</code> data file.</p>
<p>The index is loaded from the file with the descriptor given by the argument <ar>fid</ar>.</p>  
</description>
<returns>Returns a pointer to a structure containing the index on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="source">FitIndexLoad.c</example>
</function>

<function>
<name>FitRead</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitread.h</header>
<syntax>int FitRead(int fid,<sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitRead.html">FitRead</fn> function reads a <code>fitacf</code> data record from an open file.</p>
<p>The data is read from the file with the descriptor given by the argument <ar>fid</ar>. The data is decoded and used to populate the radar parameter block pointed to by the argument <ar>prm</ar> and the <code>fit</code> data structure pointer to by the argument <ar>fit</ar>.</p>  
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitRead.c</example>
</function>

<function>
<name>FitReadRadarScan</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitcfit.h</header>
<syntax>int FitReadRadarScan(int fid,int *state, <sn href="&root;/superdarn/src.lib/tk/scan/structRadarScan.html">struct RadarScan</sn> *ptr, <sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="structFitData.html">struct FitData</sn> *fit, int tlen, int lock,int chn);</syntax>
<description><p>The <fn href="FitReadRadarScan.html">FitReadRadarScan</fn> function reads one full scan of data from a <code>fitacf</code> data file.</p>
<p>The data is read from the file with the descriptor given by the argument <ar>fid</ar>.</p>
<p>The argument <ar>state</ar> is a pointer to an integer that is used internally by the function to track progress through the <code>fit</code> file. Initially this integer should be set to zero, indicating that no data has been read from the file yet. The other possible value of <ar>state</ar> are (1), indicating that a complete scan was read from the file and data from the next scan is pending, or (2) indicating that a file error occurred.</p>
<p>The scan data is written to the structure pointed to by the argument <ar>ptr</ar>. Memory is automatically allocated within this structure to store the beam data.</p>
<p>In order for the function to correctly identify a scan boundary, it must read the first beam from the subsequent scan. This data must be preserved so that it can be included in the next block of scan data returned by the next call to the function. This is done by providing storage for the radar parameter block and the fit data pointed to by the arguments <ar>prm</ar> and <ar>fit</ar>.</p>
<p>If the argument <ar>tlen</ar> has a non-zero value then the function will ignore the scan flag and instead assume the the scan has a length of <ar>tlen</ar> seconds. If the argument <ar>lock</ar> has a non-zero value it is also assumed that the scan boundaries are fixed relative to the start of the day.</p>
<p>If the final argument <ar>chn</ar>, is compared against the channel number recorded in the radar parameter block, if the two numbers do not match then the data record is excludef from the scan.</p>
</description> 
<returns>Returns zero on success, or (1) if the end of file was reached. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitReadRadarScan.c</example>
</function>

<function>
<name>FitSeek</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitseek.h</header>
<syntax>int FitSeek(int fid, int yr,int mo,int dy,int hr,int mt,int sc,double *atme, <sn href="structFitIndex.html">struct FitIndex</sn> *inx);</syntax>
<description><p>The <fn href="FitSeek.html">FitSeek</fn> function searches for a <code>fitacf</code> data record for a specific time.</p>
<p>The search is performed on the file with the descriptor given by the argument <ar>fid</ar>. The time to search for is specified by the arguments <ar>yr</ar>, <ar>mo</ar>,<ar>dy</ar>,<ar>hr</ar>,<ar>mt</ar>,<ar>sc</ar> giving the year, month, day, hour, minute and second.</p>
<p>The argument <ar>atme</ar> is a pointer to a double precision floating point number that is used to store the time of the closest record to the time requested expressed in seconds from 0:00UT January 1, 1970. If this argument is set to a <code>NULL</code> pointer then the time is not returned.</p>  
<p>If the <code>fitacf</code> file has an associated index that has been loaded, then it can be used to speed up the search by setting the argument <ar>inx</ar> to point to it.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitSeek.c</example>
</function>

<function>
<name>FitToCFit</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitcfit.h</header>
<syntax>int FitToCFit(double minpwr,<sn href="&root;/superdarn/src.lib/tk/cfit/structCFitdata.html">struct CFitdata</sn> *ptr, <sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitToCFit.html">FitToCFit</fn> function encodes a <code>fitacf</code> data record into a <code>CFit</code> data record.</p>
<p>The argument <ar>minpwr</ar> gives the minimum value of lag-zero power to store; ranges with lag-zero power below this threshold are ignored.</p>
<p>The <code>fit</code> data is encoded into the <code>CFit</code> data structure pointed to by the argument <ar>ptr</ar>. The <code>CFit</code> structure is encoded from the parameter block pointed to by the argument <ar>prm</ar> and the <code>fit</code> data structure pointer to by the argument <ar>fit</ar>.</p>  
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitToCFit.c</example>
</function>

<function>
<name>FitToRadarScan</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitscan.h</header>
<syntax>int FitToRadarScan(<sn href="&root;/superdarn/src.lib/tk/scan/structRadarScan.html">struct RadarScan</sn> *ptr,<sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitToRadarScan.html">FitToRadarScan</fn> function adds a <code>fitacf</code> data record to a structure containing radar scan data.</p>
<p>The radar scan data is pointed to by the argument <ar>ptr</ar>.The scan data is encoded from the parameter block pointed to by the argument <ar>prm</ar> and the <code>fit</code> data structure pointer to by the argument <ar>fit</ar>.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitToRadarScan.c</example>
</function>

<function>
<name>FitWrite</name>
<location>src.lib/tk/fit</location>
<header>superdarn/fitcfit.h</header>
<syntax>int FitWrite(int fid,<sn href="&root;/superdarn/src.lib/tk/radar/structRadarParm.html">struct RadarParm</sn> *prm, <sn href="structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitWrite.html">FitWrite</fn> function writes a <code>fitacf</code> data record to an open file.</p>
<p>The data is written to the file with the descriptor given by the argument <ar>fid</ar>. If <ar>fid</ar> is set to (-1) then the function will just calculate the number of bytes required to store the data. The data record is contructed the radar parameter block pointed to by the argument <ar>prm</ar> and the <code>fit</code> data structure pointer to by the argument <ar>fit</ar>.</p>  
</description>
<returns>Returns the number of bytes written on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="source">FitWrite.c</example>
</function>


<structure>
  <name>FitData</name>
  <location>src.lib/tk/fit</location>
  <header>superdarn/fitdata.h</header>
  <struct>

    <member>
      <struct>
        <member>
          <proto>char major;</proto>
          <description>Major revision number.</description>
        </member>
        <member>
          <proto>char minor;</proto>
          <description>Minor revision number.</description>
        </member>
      </struct>
      <proto>revision;</proto>
      <description>Revision number.</description>
    </member>

    <member>
        <proto><sn href="&root;/superdarn/src.lib/tk/fitacf/structFitNoise.html">struct FitNoise</sn> noise;</proto>
      <description>Noise Statistics.</description>
    </member>

    <member>
        <proto><sn href="&root;/superdarn/src.lib/tk/fitacf/structFitRange.html">struct FitRange</sn> rng[MAX_RANGE];</proto>
      <description>Fitted ACF parameters.</description>
    </member>

    <member>
        <proto><sn href="&root;/superdarn/src.lib/tk/fitacf/structFitRange.html">struct FitRange</sn> xrng[MAX_RANGE];</proto>
      <description>Fitted XCF parameters.</description>
    </member>

    <member>
        <proto><sn href="&root;/superdarn/src.lib/tk/fitacf/structFitElv.html">struct FitElv</sn> elv[MAX_RANGE];</proto>
      <description>Elevation angle.</description>
    </member>

  </struct>

  <description>
  <p>The <sn href="structFitData.html">struct FitData</sn> structure stores the fitted ACF data.</p>
  </description>
</structure>



<structure>
  <name>FitIndex</name>
  <location>src.lib/tk/fit</location>
  <header>superdarn/fitindex.h</header>
  <struct>

    <member>
       <proto>int num;</proto>
       <description>Number of records in the data file.</description>
    </member>

    <member>
      <proto>double *tme;</proto>
      <description>Pointer to an array of record times, specified as seconds from 0:00UT January 1, 1970.</description>
    </member>

    <member>
      <proto>int *inx;</proto>
      <description>Pointer to an array of byte offsets into the file marking the start of a record.</description>
    </member>

  </struct>

  <description>
  <p>The <sn href="structFitIndex.html">struct FitIndex</sn> structure stores an index of a <proto>fitacf</proto> data file.</p>
  </description>
</structure>

</library>
